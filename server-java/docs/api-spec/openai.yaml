openapi: 3.0.0
info:
  title: HHPlus E-Commerce API
  version: 1.0.0
  description: 항해플러스 이커머스 API 명세 - DDD 기반 설계

servers:
  - url: http://localhost:8080
    description: 로컬 서버
  - url: https://api.hhplus.kr
    description: 운영 서버

paths:
  /api/auth/signup:
    post:
      summary: 회원가입
      operationId: signup
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      summary: 로그인
      operationId: login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/{id}:
    get:
      summary: 사용자 조회
      operationId: getUser
      tags:
        - User
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/products:
    get:
      summary: 상품 목록 조회
      operationId: getProducts
      tags:
        - Product
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [SELLING, SOLDOUT, STOP]
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
    post:
      summary: 상품 생성
      operationId: createProduct
      tags:
        - Product
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/products/{id}:
    get:
      summary: 상품 상세 조회
      operationId: getProduct
      tags:
        - Product
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: 상품을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: 상품 수정
      operationId: updateProduct
      tags:
        - Product
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: 상품을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: 상품 삭제
      operationId: deleteProduct
      tags:
        - Product
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 삭제 성공
        '404':
          description: 상품을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/products/{id}/stock:
    patch:
      summary: 재고 수량 조정
      description: 상품의 재고를 증가 또는 감소시킵니다 (동시성 제어 적용)
      operationId: adjustStock
      tags:
        - Product
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdjustStockRequest'
      responses:
        '200':
          description: 재고 조정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: 재고 부족
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 상품을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/products/top:
    get:
      summary: 인기 상품 조회
      description: 최근 3일간 판매량 기준 상위 5개 상품
      operationId: getTopProducts
      tags:
        - Product
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'

  /api/orders:
    get:
      summary: 주문 목록 조회
      description: 사용자의 주문 목록을 조회합니다
      operationId: getOrders
      tags:
        - Order
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
    post:
      summary: 주문 생성
      operationId: createOrder
      tags:
        - Order
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: 주문 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 상품을 찾을 수 없거나 재고 부족
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/orders/{id}:
    get:
      summary: 주문 조회
      operationId: getOrder
      tags:
        - Order
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: 주문을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/orders/{id}/cancel:
    post:
      summary: 주문 취소
      description: 주문을 취소하고 재고를 복구합니다
      operationId: cancelOrder
      tags:
        - Order
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOrderRequest'
      responses:
        '200':
          description: 취소 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: 취소 불가능한 상태
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 주문을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/payments:
    get:
      summary: 결제 내역 조회
      description: 주문의 결제/환불 내역을 조회합니다
      operationId: getPayments
      tags:
        - Payment
      security:
        - BearerAuth: []
      parameters:
        - name: orderId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentListResponse'
    post:
      summary: 결제 실행
      operationId: executePayment
      tags:
        - Payment
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '200':
          description: 결제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '402':
          description: 포인트 부족
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/payments/refund:
    post:
      summary: 환불 요청
      description: 주문에 대한 전액 또는 부분 환불을 요청합니다
      operationId: refundPayment
      tags:
        - Payment
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '200':
          description: 환불 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/points/charge:
    patch:
      summary: 포인트 충전
      operationId: chargePoint
      tags:
        - Point
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargePointRequest'
      responses:
        '200':
          description: 충전 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/points/{userId}:
    get:
      summary: 포인트 조회
      operationId: getPoint
      tags:
        - Point
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointResponse'
        '404':
          description: 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/points/{userId}/history:
    get:
      summary: 포인트 이력 조회
      operationId: getPointHistory
      tags:
        - Point
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointHistoryResponse'

  /api/coupons:
    post:
      summary: 쿠폰 생성
      description: 관리자가 쿠폰을 생성합니다
      operationId: createCoupon
      tags:
        - Coupon
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCouponRequest'
      responses:
        '201':
          description: 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: 쿠폰 목록 조회
      operationId: getCoupons
      tags:
        - Coupon
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [ACTIVE, EXPIRED, EXHAUSTED]
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponListResponse'

  /api/coupons/{id}:
    get:
      summary: 쿠폰 상세 조회
      operationId: getCoupon
      tags:
        - Coupon
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponResponse'
        '404':
          description: 쿠폰을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/coupons/{id}/issue:
    post:
      summary: 쿠폰 발급
      description: 사용자에게 쿠폰을 발급합니다 (선착순 쿠폰의 경우 동시성 제어 적용)
      operationId: issueCoupon
      tags:
        - Coupon
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueCouponRequest'
      responses:
        '200':
          description: 발급 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCouponResponse'
        '400':
          description: 발급 불가 (수량 소진, 중복 발급 등)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 쿠폰을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/{userId}/coupons:
    get:
      summary: 사용자 쿠폰 목록 조회
      operationId: getUserCoupons
      tags:
        - Coupon
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [AVAILABLE, RESERVED, USED, EXPIRED]
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCouponListResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: "USER_NOT_FOUND"
        message:
          type: string
          example: "사용자를 찾을 수 없습니다"
        timestamp:
          type: string
          format: date-time

    SignupRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        name:
          type: string
          minLength: 2
          maxLength: 50

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        accessToken:
          type: string
        expiresIn:
          type: integer
          example: 3600

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time

    CreateProductRequest:
      type: object
      required:
        - name
        - price
        - stock
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        price:
          type: integer
          format: int64
          minimum: 0
        stock:
          type: integer
          format: int32
          minimum: 0

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        price:
          type: integer
          format: int64
          minimum: 0
        status:
          type: string
          enum: [SELLING, SOLDOUT, STOP]

    AdjustStockRequest:
      type: object
      required:
        - quantity
        - type
      properties:
        quantity:
          type: integer
          format: int32
          description: 조정할 수량 (양수)
        type:
          type: string
          enum: [INCREASE, DECREASE]
          description: INCREASE(입고), DECREASE(출고)

    ProductResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        stock:
          type: integer
          format: int32
        status:
          type: string
          enum: [SELLING, SOLDOUT, STOP]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProductListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductResponse'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer

    CreateOrderRequest:
      type: object
      required:
        - userId
        - items
      properties:
        userId:
          type: string
          format: uuid
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/OrderItemRequest'
        userCouponId:
          type: string
          format: uuid
          description: 적용할 쿠폰 ID (선택)

    OrderItemRequest:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: string
          format: uuid
        quantity:
          type: integer
          format: int32
          minimum: 1

    OrderResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemResponse'
        totalAmount:
          type: integer
          format: int64
        discountAmount:
          type: integer
          format: int64
        finalAmount:
          type: integer
          format: int64
        paidAmount:
          type: integer
          format: int64
        pointAmount:
          type: integer
          format: int64
          description: 포인트로 결제한 금액
        remainingAmount:
          type: integer
          format: int64
        appliedCoupon:
          $ref: '#/components/schemas/AppliedCouponInfo'
        payments:
          type: array
          items:
            $ref: '#/components/schemas/PaymentResponse'
          description: 결제/환불 내역
        status:
          type: string
          enum: [PENDING, PAID, PARTIAL_PAID, REFUNDED, PARTIAL_REFUNDED, CANCELLED]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AppliedCouponInfo:
      type: object
      properties:
        userCouponId:
          type: string
          format: uuid
        couponName:
          type: string
        discountType:
          type: string
          enum: [FIXED, PERCENTAGE]
        discountValue:
          type: integer
          format: int64
        discountAmount:
          type: integer
          format: int64
          description: 실제 적용된 총 할인 금액
        appliedProductIds:
          type: array
          items:
            type: string
            format: uuid
          description: 쿠폰이 적용된 상품 ID 목록 (비어있으면 전체 주문에 적용)

    OrderItemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        productName:
          type: string
        unitPrice:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        totalPrice:
          type: integer
          format: int64
        discountAmount:
          type: integer
          format: int64
          description: 해당 상품에 적용된 할인 금액
        finalPrice:
          type: integer
          format: int64
          description: 할인 적용 후 최종 금액

    OrderListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/OrderResponse'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer

    CancelOrderRequest:
      type: object
      required:
        - reason
      properties:
        reason:
          type: string
          description: 취소 사유
          example: "단순 변심"

    PaymentRequest:
      type: object
      required:
        - orderId
        - userId
        - amount
      properties:
        orderId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        amount:
          type: integer
          format: int64
        pointAmount:
          type: integer
          format: int64
          description: 포인트로 결제할 금액 (선택)
          default: 0

    RefundRequest:
      type: object
      required:
        - orderId
        - userId
        - amount
        - reason
      properties:
        orderId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        amount:
          type: integer
          format: int64
          description: 환불 금액 (전액 환불 시 주문 금액과 동일)
        reason:
          type: string
          description: 환불 사유
          example: "단순 변심"

    PaymentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        amount:
          type: integer
          format: int64
          description: 총 결제/환불 금액
        pointAmount:
          type: integer
          format: int64
          description: 포인트로 결제한 금액
        type:
          type: string
          enum: [PAYMENT, REFUND]
        status:
          type: string
          enum: [SUCCESS, FAILED, CANCELLED]
        reason:
          type: string
          description: 환불 사유 (REFUND 타입일 때만)
        paidAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    PaymentListResponse:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
        payments:
          type: array
          items:
            $ref: '#/components/schemas/PaymentResponse'
        summary:
          type: object
          properties:
            totalPaid:
              type: integer
              format: int64
              description: 총 결제 금액
            totalRefunded:
              type: integer
              format: int64
              description: 총 환불 금액
            netAmount:
              type: integer
              format: int64
              description: 순 결제 금액 (결제 - 환불)

    ChargePointRequest:
      type: object
      required:
        - userId
        - amount
      properties:
        userId:
          type: string
          format: uuid
        amount:
          type: integer
          format: int64
          minimum: 1000

    PointResponse:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        balance:
          type: integer
          format: int64
        updatedAt:
          type: string
          format: date-time

    PointHistoryResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PointHistoryItem'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer

    PointHistoryItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        type:
          type: string
          enum: [CHARGE, USE, REFUND]
        amount:
          type: integer
          format: int64
        balance:
          type: integer
          format: int64
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        expiredAt:
          type: string
          format: date-time

    CreateCouponRequest:
      type: object
      required:
        - name
        - discountType
        - discountValue
        - totalQuantity
        - startDate
        - endDate
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        discountType:
          type: string
          enum: [FIXED, PERCENTAGE]
          description: FIXED(정액), PERCENTAGE(정률)
        discountValue:
          type: integer
          format: int64
          description: 할인 금액 또는 할인율 (정률일 경우 1-100)
        minOrderAmount:
          type: integer
          format: int64
          description: 최소 주문 금액
        maxDiscountAmount:
          type: integer
          format: int64
          description: 최대 할인 금액 (정률 쿠폰일 때)
        totalQuantity:
          type: integer
          format: int32
          description: 총 발급 가능 수량
        isFirstCome:
          type: boolean
          default: false
          description: 선착순 쿠폰 여부
        productIds:
          type: array
          items:
            type: string
            format: uuid
          description: 적용 가능한 상품 ID 목록 (비어있으면 전체 상품)
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time

    CouponResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        discountType:
          type: string
          enum: [FIXED, PERCENTAGE]
        discountValue:
          type: integer
          format: int64
        minOrderAmount:
          type: integer
          format: int64
        maxDiscountAmount:
          type: integer
          format: int64
        totalQuantity:
          type: integer
          format: int32
        issuedQuantity:
          type: integer
          format: int32
        remainingQuantity:
          type: integer
          format: int32
        isFirstCome:
          type: boolean
        productIds:
          type: array
          items:
            type: string
            format: uuid
        status:
          type: string
          enum: [ACTIVE, EXPIRED, EXHAUSTED]
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    CouponListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CouponResponse'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer

    IssueCouponRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          format: uuid

    UserCouponResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        couponId:
          type: string
          format: uuid
        couponName:
          type: string
        discountType:
          type: string
          enum: [FIXED, PERCENTAGE]
        discountValue:
          type: integer
          format: int64
        minOrderAmount:
          type: integer
          format: int64
        maxDiscountAmount:
          type: integer
          format: int64
        status:
          type: string
          enum: [AVAILABLE, RESERVED, USED, EXPIRED]
        issuedAt:
          type: string
          format: date-time
        usedAt:
          type: string
          format: date-time
        expiredAt:
          type: string
          format: date-time

    UserCouponListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserCouponResponse'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
