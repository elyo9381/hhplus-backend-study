openapi: 3.0.0
info:
  title: HHPlus E-Commerce API
  version: 1.0.0
  description: 항해플러스 이커머스 API 명세 - DDD 기반 설계

servers:
  - url: http://localhost:8080
    description: 로컬 서버
  - url: https://api.hhplus.kr
    description: 운영 서버

paths:
  /api/auth/signup:
    post:
      summary: 회원가입
      operationId: signup
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      summary: 로그인
      operationId: login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/users/{id}:
    get:
      summary: 사용자 조회
      operationId: getUser
      tags:
        - User
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/products:
    get:
      summary: 상품 목록 조회
      operationId: getProducts
      tags:
        - Product
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [SELLING, SOLDOUT, STOP]
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
    post:
      summary: 상품 생성
      operationId: createProduct
      tags:
        - Product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/products/{id}:
    get:
      summary: 상품 상세 조회
      operationId: getProduct
      tags:
        - Product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: 상품을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/products/top:
    get:
      summary: 인기 상품 조회
      description: 최근 3일간 판매량 기준 상위 5개 상품
      operationId: getTopProducts
      tags:
        - Product
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'

  /api/orders:
    get:
      summary: 주문 목록 조회
      description: 사용자의 주문 목록을 조회합니다
      operationId: getOrders
      tags:
        - Order
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
    post:
      summary: 주문 생성
      operationId: createOrder
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: 주문 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 상품을 찾을 수 없거나 재고 부족
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/orders/{id}:
    get:
      summary: 주문 조회
      operationId: getOrder
      tags:
        - Order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: 주문을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/payments:
    get:
      summary: 결제 내역 조회
      description: 주문의 결제/환불 내역을 조회합니다
      operationId: getPayments
      tags:
        - Payment
      parameters:
        - name: orderId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentListResponse'
    post:
      summary: 결제 실행
      operationId: executePayment
      tags:
        - Payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '200':
          description: 결제 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '402':
          description: 포인트 부족
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/payments/refund:
    post:
      summary: 환불 요청
      description: 주문에 대한 전액 또는 부분 환불을 요청합니다
      operationId: refundPayment
      tags:
        - Payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '200':
          description: 환불 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/points/charge:
    post:
      summary: 포인트 충전
      operationId: chargePoint
      tags:
        - Point
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargePointRequest'
      responses:
        '200':
          description: 충전 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/points/{userId}:
    get:
      summary: 포인트 조회
      operationId: getPoint
      tags:
        - Point
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointResponse'
        '404':
          description: 사용자를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/points/{userId}/history:
    get:
      summary: 포인트 이력 조회
      operationId: getPointHistory
      tags:
        - Point
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointHistoryResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          example: "USER_NOT_FOUND"
        message:
          type: string
          example: "사용자를 찾을 수 없습니다"
        timestamp:
          type: string
          format: date-time

    SignupRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        name:
          type: string
          minLength: 2
          maxLength: 50

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        accessToken:
          type: string
        expiresIn:
          type: integer
          example: 3600

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time

    CreateProductRequest:
      type: object
      required:
        - name
        - price
        - stock
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        price:
          type: integer
          format: int64
          minimum: 0
        stock:
          type: integer
          format: int32
          minimum: 0

    ProductResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        stock:
          type: integer
          format: int32
        status:
          type: string
          enum: [SELLING, SOLDOUT, STOP]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProductListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductResponse'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer

    CreateOrderRequest:
      type: object
      required:
        - userId
        - items
      properties:
        userId:
          type: string
          format: uuid
        items:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/OrderItemRequest'

    OrderItemRequest:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: string
          format: uuid
        quantity:
          type: integer
          format: int32
          minimum: 1

    OrderResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemResponse'
        totalAmount:
          type: integer
          format: int64
        discountAmount:
          type: integer
          format: int64
        finalAmount:
          type: integer
          format: int64
        paidAmount:
          type: integer
          format: int64
        remainingAmount:
          type: integer
          format: int64
        status:
          type: string
          enum: [PENDING, PAID, PARTIAL_PAID, REFUNDED, PARTIAL_REFUNDED, CANCELLED]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    OrderItemResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        productName:
          type: string
        unitPrice:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        totalPrice:
          type: integer
          format: int64

    OrderListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/OrderResponse'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer

    PaymentRequest:
      type: object
      required:
        - orderId
        - userId
        - amount
        - type
      properties:
        orderId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        amount:
          type: integer
          format: int64
        type:
          type: string
          enum: [PAYMENT, REFUND]

    RefundRequest:
      type: object
      required:
        - orderId
        - userId
        - amount
        - reason
      properties:
        orderId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        amount:
          type: integer
          format: int64
          description: 환불 금액 (전액 환불 시 주문 금액과 동일)
        reason:
          type: string
          description: 환불 사유
          example: "단순 변심"

    PaymentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        amount:
          type: integer
          format: int64
        type:
          type: string
          enum: [PAYMENT, REFUND]
        status:
          type: string
          enum: [SUCCESS, FAILED, CANCELLED]
        reason:
          type: string
          description: 환불 사유 (REFUND 타입일 때만)
        paidAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    PaymentListResponse:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
        payments:
          type: array
          items:
            $ref: '#/components/schemas/PaymentResponse'
        summary:
          type: object
          properties:
            totalPaid:
              type: integer
              format: int64
              description: 총 결제 금액
            totalRefunded:
              type: integer
              format: int64
              description: 총 환불 금액
            netAmount:
              type: integer
              format: int64
              description: 순 결제 금액 (결제 - 환불)

    ChargePointRequest:
      type: object
      required:
        - userId
        - amount
      properties:
        userId:
          type: string
          format: uuid
        amount:
          type: integer
          format: int64
          minimum: 1000

    PointResponse:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        balance:
          type: integer
          format: int64
        updatedAt:
          type: string
          format: date-time

    PointHistoryResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PointHistoryItem'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer

    PointHistoryItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        type:
          type: string
          enum: [CHARGE, USE, REFUND]
        amount:
          type: integer
          format: int64
        balance:
          type: integer
          format: int64
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        expiredAt:
          type: string
          format: date-time
